/*
 * Copyright 2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("io.spring.javaformat:spring-javaformat-gradle-plugin:0.0.21")
	}
}

plugins {
	id 'java-gradle-plugin'
	id 'maven-publish'
	id "checkstyle"
	id "com.jfrog.artifactory" version '4.9.10'
	id 'com.gradle.plugin-publish' version '0.10.1'
	id "io.spring.nohttp" version "0.0.2.RELEASE"
	id "nebula.integtest" version "7.0.7"
}

apply plugin: "io.spring.javaformat"
apply from: "gradle/artifactory.gradle"
apply from: "gradle/java-gradle-plugin.gradle"

group 'io.spring.gradle'
description = 'Sets up Javadoc and Aggregate Javadoc'

checkstyle {
	toolVersion = "8.29"
	configProperties 'projectRootPackage': 'io.spring.gradle.javadoc'
}

sourceCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "https://plugins.gradle.org/m2/" }
}

dependencyLocking {
	lockAllConfigurations()
}

dependencies {
	checkstyle("io.spring.javaformat:spring-javaformat-checkstyle:0.0.21")
	implementation gradleApi()
	testImplementation 'org.assertj:assertj-core:3.+'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.+'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.+'
}

tasks.withType(Test).configureEach {
	useJUnitPlatform()
}
